plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "${project.archives_base_name}-${project.minecraft_version}"
}

repositories {
	maven {
		url = 'https://oss.sonatype.org/content/repositories/snapshots'
	}
	maven {
		url = 'https://jitpack.io'
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content { includeGroup "maven.modrinth" }
	}
	maven { // Forge Config API Port
		name = "Fuzs Mod Resources"
		url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
	}
	maven { // Just Enough Items
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven { // JEI Backup
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven { // Player Animation Lib
		name = "KosmX's maven"
		url = 'https://maven.kosmx.dev/'
	}
	maven { // Cardinal Components API
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { // Mod Menu
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
	}
	maven { // REI, Cloth Config
		url = "https://maven.shedaniel.me/"
	}
	maven { // Porting Lib
		url = "https://mvn.devos.one/releases/"
	}
}

loom {
	accessWidenerPath = file("src/main/resources/tacz.accesswidener")
}

dependencies {
	// Minecraft and mappings
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

	// Fabric API
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	// Apache Commons Math library for performing some interpolation operations
	implementation(include('org.apache.commons:commons-math3:3.6.1'))

	// LuaJ for animation state machine
	implementation(include("com.github.FiguraMC.luaj:luaj-jse:${project.luaj_version}"))
	implementation(include("com.github.FiguraMC.luaj:luaj-core:${project.luaj_version}"))

	// Mod dependencies
	modImplementation("maven.modrinth:shoulder-surfing-reloaded:${project.shoulder_surfing_reloaded_version}")
	modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_animation_lib_version}")
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:core:${project.porting_lib_version}+${project.minecraft_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:${project.porting_lib_version}+${project.minecraft_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:entity:${project.porting_lib_version}+${project.minecraft_version}"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_api_version}"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_api_version}"))
	modImplementation(include("maven.modrinth:modernkeybinding:${project.modernkeybinding_version}"))
	modImplementation("maven.modrinth:perspective-mod-redux:${project.perspective_mod_redux_version}")

	modRuntimeOnly("maven.modrinth:moonlight:${project.moonlight_version}")
	modRuntimeOnly("maven.modrinth:mmmmmmmmmmmm:${project.mmmmmmmmmmmm_version}")
	modRuntimeOnly("maven.modrinth:resolution-control-plus:${project.resolution_control_plus_version}")
//	modRuntimeOnly("maven.modrinth:emi:${project.emi_version}+${project.minecraft_version}+fabric")
	modRuntimeOnly("maven.modrinth:jei:${project.jei_version}")
	modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
	modRuntimeOnly("maven.modrinth:tweakeroo:${project.tweakeroo_version}")
	modRuntimeOnly("maven.modrinth:malilib:${project.malilib_version}")

	modApi("com.terraformersmc:modmenu:${project.modmenu_version}")
	modApi("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.forgeconfigapiport_version}")
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Compile only mods
	modCompileOnly("org.embeddedt:embeddium-${project.minecraft_version}:${project.embeddedt_version}")
	modCompileOnly("maven.modrinth:iris:${project.iris_version}")
	modCompileOnly("maven.modrinth:carry-on:${project.carry_on_version}")
	modCompileOnly("maven.modrinth:immediatelyfast:${project.immediatelyfast_version}")
	modCompileOnly("maven.modrinth:zoomify:${project.zoomify_version}")
	modCompileOnly("dev.emi:emi-fabric:${project.emi_version}+${project.minecraft_version}:api")
	modCompileOnly("maven.modrinth:jei:${project.jei_version}")
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
	modCompileOnly(include("maven.modrinth:controlling:${project.controlling_version}"))
	modCompileOnly(include("maven.modrinth:searchables:${project.searchables_version}"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	options.release = 17
	options.encoding = 'UTF-8'
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}
